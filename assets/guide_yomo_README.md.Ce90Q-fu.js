import{_ as n,c as a,b as e,o as l}from"./chunks/framework.B1z0IdBH.js";const u=JSON.parse(`{"title":"YoMo Framework - Deepseek Provider","description":"","frontmatter":{},"headers":[{"level":2,"title":"ðŸš€ Getting Started","slug":"ðŸš€-getting-started","link":"#ðŸš€-getting-started","children":[{"level":3,"title":"Step 1. Install CLI","slug":"step-1-install-cli","link":"#step-1-install-cli","children":[]},{"level":3,"title":"Step 2. Start the server","slug":"step-2-start-the-server","link":"#step-2-start-the-server","children":[]},{"level":3,"title":"Step 3. Write the function","slug":"step-3-write-the-function","link":"#step-3-write-the-function","children":[]},{"level":3,"title":"Done, let's have a try","slug":"done-let-s-have-a-try","link":"#done-let-s-have-a-try","children":[]},{"level":3,"title":"Full Example Code","slug":"full-example-code","link":"#full-example-code","children":[]}]},{"level":2,"title":"ðŸŽ¯ Focuses on Geo-distributed AI Inference Infra","slug":"ðŸŽ¯-focuses-on-geo-distributed-ai-inference-infra","link":"#ðŸŽ¯-focuses-on-geo-distributed-ai-inference-infra","children":[]}],"relativePath":"guide/yomo/README.md","filePath":"guide/yomo/README.md"}`),p={name:"guide/yomo/README.md"};function o(t,s,r,c,i,d){return l(),a("div",null,s[0]||(s[0]=[e(`<h1 id="yomo-framework-deepseek-provider" tabindex="-1">YoMo Framework - Deepseek Provider <a class="header-anchor" href="#yomo-framework-deepseek-provider" aria-label="Permalink to &quot;YoMo Framework - Deepseek Provider&quot;">â€‹</a></h1><p>YoMo is an open-source LLM Function Calling Framework for building Geo-distributed AI agents. Built atop QUIC Transport Protocol and Strongly-typed Stateful Serverless architecture, makes your AI agents low-latency, reliable, secure, and easy.</p><h2 id="ðŸš€-getting-started" tabindex="-1">ðŸš€ Getting Started <a class="header-anchor" href="#ðŸš€-getting-started" aria-label="Permalink to &quot;ðŸš€ Getting Started&quot;">â€‹</a></h2><p>Let&#39;s implement a function calling serverless <code>sfn-get-ip-latency</code>:</p><h3 id="step-1-install-cli" tabindex="-1">Step 1. Install CLI <a class="header-anchor" href="#step-1-install-cli" aria-label="Permalink to &quot;Step 1. Install CLI&quot;">â€‹</a></h3><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#B392F0;">curl</span><span style="color:#79B8FF;"> -fsSL</span><span style="color:#9ECBFF;"> https://get.yomo.run</span><span style="color:#F97583;"> |</span><span style="color:#B392F0;"> sh</span></span></code></pre></div><h3 id="step-2-start-the-server" tabindex="-1">Step 2. Start the server <a class="header-anchor" href="#step-2-start-the-server" aria-label="Permalink to &quot;Step 2. Start the server&quot;">â€‹</a></h3><p>Prepare the configuration as <code>my-agent.yaml</code></p><div class="language-yaml"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#85E89D;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">ai-zipper</span></span>
<span class="line"><span style="color:#85E89D;">host</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">0.0.0.0</span></span>
<span class="line"><span style="color:#85E89D;">port</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">9000</span></span>
<span class="line"></span>
<span class="line"><span style="color:#85E89D;">auth</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#85E89D;">  type</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">token</span></span>
<span class="line"><span style="color:#85E89D;">  token</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">SECRET_TOKEN</span></span>
<span class="line"></span>
<span class="line"><span style="color:#85E89D;">bridge</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#85E89D;">  ai</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#85E89D;">    server</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#85E89D;">      addr</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">0.0.0.0:9000</span><span style="color:#6A737D;"> ## Restful API endpoint</span></span>
<span class="line"><span style="color:#85E89D;">      provider</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">deepseek</span><span style="color:#6A737D;"> ## LLM API Service we will use</span></span>
<span class="line"></span>
<span class="line"><span style="color:#85E89D;">    providers</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#85E89D;">      deepseek</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#85E89D;">        api_key</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&lt;DEEPSEEK_API_KEY&gt;</span></span>
<span class="line"><span style="color:#85E89D;">        model</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">deepseek-reasoner</span></span></code></pre></div><p>Start the server:</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">YOMO_LOG_LEVEL</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">debug</span><span style="color:#B392F0;"> yomo</span><span style="color:#9ECBFF;"> serve</span><span style="color:#79B8FF;"> -c</span><span style="color:#9ECBFF;"> my-agent.yaml</span></span></code></pre></div><h3 id="step-3-write-the-function" tabindex="-1">Step 3. Write the function <a class="header-anchor" href="#step-3-write-the-function" aria-label="Permalink to &quot;Step 3. Write the function&quot;">â€‹</a></h3><p>First, let&#39;s define what this function do and how&#39;s the parameters required, these will be combined to prompt when invoking LLM.</p><div class="language-golang"><button title="Copy Code" class="copy"></button><span class="lang">golang</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span>type Parameter struct {</span></span>
<span class="line"><span>	Domain string \`json:&quot;domain&quot; jsonschema:&quot;description=Domain of the website,example=example.com&quot;\`</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>func Description() string {</span></span>
<span class="line"><span>	return \`if user asks ip or network latency of a domain, you should return the result of the giving domain. try your best to dissect user expressions to infer the right domain names\`</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>func InputSchema() any {</span></span>
<span class="line"><span>	return &amp;Parameter{}</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>Create a Stateful Serverless Function to get the IP and Latency of a domain:</p><div class="language-golang"><button title="Copy Code" class="copy"></button><span class="lang">golang</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span>func Handler(ctx serverless.Context) {</span></span>
<span class="line"><span>	var msg Parameter</span></span>
<span class="line"><span>	ctx.ReadLLMArguments(&amp;msg)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>	// get ip of the domain</span></span>
<span class="line"><span>	ips, _ := net.LookupIP(msg.Domain)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>	// get ip[0] ping latency</span></span>
<span class="line"><span>	pinger, _ := ping.NewPinger(ips[0].String())</span></span>
<span class="line"><span>	pinger.Count = 3</span></span>
<span class="line"><span>	pinger.Run()</span></span>
<span class="line"><span>	stats := pinger.Statistics()</span></span>
<span class="line"><span></span></span>
<span class="line"><span>	val := fmt.Sprintf(&quot;domain %s has ip %s with average latency %s&quot;, msg.Domain, ips[0], stats.AvgRtt)</span></span>
<span class="line"><span>	ctx.WriteLLMResult(val)</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>Finally, let&#39;s run it</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#9ECBFF;"> yomo</span><span style="color:#9ECBFF;"> run</span><span style="color:#9ECBFF;"> app.go</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">time</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">2025-01-29T21:43:30.583+08:00</span><span style="color:#E1E4E8;"> level</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">INFO</span><span style="color:#E1E4E8;"> msg</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;connected to zipper&quot;</span><span style="color:#E1E4E8;"> component</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">StreamFunction</span><span style="color:#E1E4E8;"> sfn_id</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">B0ttNSEKLSgMjXidB11K1</span><span style="color:#E1E4E8;"> sfn_name</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">fn-get-ip-from-domain</span><span style="color:#E1E4E8;"> zipper_addr</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">localhost:9000</span></span>
<span class="line"><span style="color:#E1E4E8;">time</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">2025-01-29T21:43:30.584+08:00</span><span style="color:#E1E4E8;"> level</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">INFO</span><span style="color:#E1E4E8;"> msg</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;register ai function success&quot;</span><span style="color:#E1E4E8;"> component</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">StreamFunction</span><span style="color:#E1E4E8;"> sfn_id</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">B0ttNSEKLSgMjXidB11K1</span><span style="color:#E1E4E8;"> sfn_name</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">fn-get-ip-from-domain</span><span style="color:#E1E4E8;"> zipper_addr</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">localhost:9000</span><span style="color:#E1E4E8;"> name</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">fn-get-ip-from-domain</span><span style="color:#E1E4E8;"> tag</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">16</span></span></code></pre></div><h3 id="done-let-s-have-a-try" tabindex="-1">Done, let&#39;s have a try <a class="header-anchor" href="#done-let-s-have-a-try" aria-label="Permalink to &quot;Done, let&#39;s have a try&quot;">â€‹</a></h3><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#9ECBFF;"> curl</span><span style="color:#79B8FF;"> -i</span><span style="color:#9ECBFF;"> http://127.0.0.1:9000/v1/chat/completions</span><span style="color:#79B8FF;"> -H</span><span style="color:#9ECBFF;"> &quot;Content-Type: application/json&quot;</span><span style="color:#79B8FF;"> -d</span><span style="color:#9ECBFF;"> &#39;{</span></span>
<span class="line"><span style="color:#9ECBFF;">  &quot;messages&quot;: [</span></span>
<span class="line"><span style="color:#9ECBFF;">    {</span></span>
<span class="line"><span style="color:#9ECBFF;">      &quot;role&quot;: &quot;system&quot;,</span></span>
<span class="line"><span style="color:#9ECBFF;">      &quot;content&quot;: &quot;You are a test assistant.&quot;</span></span>
<span class="line"><span style="color:#9ECBFF;">    },</span></span>
<span class="line"><span style="color:#9ECBFF;">    {</span></span>
<span class="line"><span style="color:#9ECBFF;">      &quot;role&quot;: &quot;user&quot;,</span></span>
<span class="line"><span style="color:#9ECBFF;">      &quot;content&quot;: &quot;Compare website speed between Nike and Puma&quot;</span></span>
<span class="line"><span style="color:#9ECBFF;">    }</span></span>
<span class="line"><span style="color:#9ECBFF;">  ],</span></span>
<span class="line"><span style="color:#9ECBFF;">  &quot;stream&quot;: false</span></span>
<span class="line"><span style="color:#9ECBFF;">}&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">HTTP/1.1</span><span style="color:#79B8FF;"> 200</span><span style="color:#9ECBFF;"> OK</span></span>
<span class="line"><span style="color:#B392F0;">Content-Length:</span><span style="color:#79B8FF;"> 944</span></span>
<span class="line"><span style="color:#B392F0;">Connection:</span><span style="color:#9ECBFF;"> keep-alive</span></span>
<span class="line"><span style="color:#B392F0;">Content-Type:</span><span style="color:#9ECBFF;"> application/json</span></span>
<span class="line"><span style="color:#B392F0;">Date:</span><span style="color:#9ECBFF;"> Wed,</span><span style="color:#79B8FF;"> 29</span><span style="color:#9ECBFF;"> Jan</span><span style="color:#79B8FF;"> 2025</span><span style="color:#9ECBFF;"> 13:30:14</span><span style="color:#9ECBFF;"> GMT</span></span>
<span class="line"><span style="color:#B392F0;">Keep-Alive:</span><span style="color:#9ECBFF;"> timeout=</span><span style="color:#79B8FF;">4</span></span>
<span class="line"><span style="color:#B392F0;">Proxy-Connection:</span><span style="color:#9ECBFF;"> keep-alive</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#B392F0;">  &quot;Content&quot;</span><span style="color:#79B8FF;">:</span><span style="color:#9ECBFF;"> &quot;Based on the data provided for the domains nike.com and puma.com which include IP addresses and average latencies, we can infer the following about their website speeds:</span></span>
<span class="line"><span style="color:#9ECBFF;">  - Nike.com has an IP address of 13.225.183.84 with an average latency of 65.568333 milliseconds.</span></span>
<span class="line"><span style="color:#9ECBFF;">  - Puma.com has an IP address of 151.101.194.132 with an average latency of 54.563666 milliseconds.</span></span>
<span class="line"><span style="color:#9ECBFF;">  </span></span>
<span class="line"><span style="color:#9ECBFF;">  Comparing these latencies, Puma.com is faster than Nike.com as it has a lower average latency. </span></span>
<span class="line"><span style="color:#9ECBFF;">  </span></span>
<span class="line"><span style="color:#9ECBFF;">  Please be aware, however, that website speed can be influenced by many factors beyond latency, such as server processing time, content size, and delivery networks among others. To get a more comprehensive understanding of website speed, you would need to consider additional metrics and possibly conductreal-time speed tests.&quot;,</span></span>
<span class="line"><span style="color:#B392F0;">  &quot;FinishReason&quot;</span><span style="color:#79B8FF;">:</span><span style="color:#9ECBFF;"> &quot;stop&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div><h3 id="full-example-code" tabindex="-1">Full Example Code <a class="header-anchor" href="#full-example-code" aria-label="Permalink to &quot;Full Example Code&quot;">â€‹</a></h3><p><a href="https://github.com/yomorun/llm-function-calling-examples" target="_blank" rel="noreferrer">Full LLM Function Calling Codes</a></p><h2 id="ðŸŽ¯-focuses-on-geo-distributed-ai-inference-infra" tabindex="-1">ðŸŽ¯ Focuses on Geo-distributed AI Inference Infra <a class="header-anchor" href="#ðŸŽ¯-focuses-on-geo-distributed-ai-inference-infra" aria-label="Permalink to &quot;ðŸŽ¯ Focuses on Geo-distributed AI Inference Infra&quot;">â€‹</a></h2><p>Itâ€™s no secret that todayâ€™s users want instant AI inference, every AI application is more powerful when it response quickly. But, currently, when we talk about <code>distribution</code>, it represents <strong>distribution in data center</strong>. The AI model is far away from their users from all over the world.</p><p>If an application can be deployed anywhere close to their end users, solve the problem, this is <strong>Geo-distributed System Architecture</strong>:</p><img width="580" alt="yomo geo-distributed system" src="https://user-images.githubusercontent.com/65603/162367572-5a0417fa-e2b2-4d35-8c92-2c95d461706d.png">`,26)]))}const F=n(p,[["render",o]]);export{u as __pageData,F as default};
