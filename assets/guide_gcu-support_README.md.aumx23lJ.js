import{_ as n,c as a,b as e,o as p}from"./chunks/framework.B1z0IdBH.js";const g=JSON.parse('{"title":"Qwen2.5 推理","description":"","frontmatter":{},"headers":[{"level":2,"title":"1、配置运行环境","slug":"_1、配置运行环境","link":"#_1、配置运行环境","children":[]},{"level":2,"title":"2、推理","slug":"_2、推理","link":"#_2、推理","children":[]}],"relativePath":"guide/gcu-support/README.md","filePath":"guide/gcu-support/README.md"}'),t={name:"guide/gcu-support/README.md"};function l(o,s,c,i,r,d){return p(),a("div",null,s[0]||(s[0]=[e(`<h1 id="qwen2-5-推理" tabindex="-1">Qwen2.5 推理 <a class="header-anchor" href="#qwen2-5-推理" aria-label="Permalink to &quot;Qwen2.5 推理&quot;">​</a></h1><h2 id="_1、配置运行环境" tabindex="-1">1、配置运行环境 <a class="header-anchor" href="#_1、配置运行环境" aria-label="Permalink to &quot;1、配置运行环境&quot;">​</a></h2><p><strong>安装驱动</strong></p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span># &lt;version_id&gt; 为软件包具体版本号。</span></span>
<span class="line"><span>chmod +x TopsRider_i3x_&lt;version_id&gt;_deb_amd64.run</span></span>
<span class="line"><span>./TopsRider_i3x_&lt;version_id&gt;_deb_amd64.run -y</span></span></code></pre></div><p><strong>创建并启动 docker</strong></p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span># 创建 docker 容器，将在基础镜像 artifact.enflame.cn/enflame_docker_images/ubuntu/qic_ubuntu_2004_gcc9:1.4.4 的基础上创建 docker。</span></span>
<span class="line"><span># &lt;project_path&gt; 当前工程所在路径</span></span>
<span class="line"><span># -e ENFLAME_VISIBLE_DEVICES=2 进行 GCU 资源隔离，如需多卡可以改为 0,1,2,3 等</span></span>
<span class="line"><span>docker run -itd -e ENFLAME_VISIBLE_DEVICES=2 --name qwen-infer -v &lt;project_path&gt;:/work -v /root/:/root/ --privileged --network host  artifact.enflame.cn/enflame_docker_images/ubuntu/qic_ubuntu_2004_gcc9:1.4.4 bash</span></span></code></pre></div><p><strong>进入 docker 安装环境</strong></p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span># 进入 docker 容器</span></span>
<span class="line"><span>docker exec -it qwen-infer bash</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 安装 SDK 框架，进入软件包所在地址。</span></span>
<span class="line"><span># &lt;version_id&gt; 为软件包具体版本号。</span></span>
<span class="line"><span>./TopsRider_i3x_&lt;version_id&gt;_amd64.run -C torch-gcu-2 -y</span></span>
<span class="line"><span>./TopsRider_i3x_&lt;version_id&gt;_deb_amd64.run -C tops-sdk -y</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 安装 python 库</span></span>
<span class="line"><span>pip3.8 install transformers==4.40.2</span></span>
<span class="line"><span>pip3.8 install accelerate</span></span></code></pre></div><h2 id="_2、推理" tabindex="-1">2、推理 <a class="header-anchor" href="#_2、推理" aria-label="Permalink to &quot;2、推理&quot;">​</a></h2><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span># 进入本工程目录，包含运行代码、推理输入等文件。</span></span>
<span class="line"><span>.</span></span>
<span class="line"><span>├── README.md</span></span>
<span class="line"><span>└── gcu_demo.py</span></span></code></pre></div><p><strong>启动推理示例</strong></p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span>python3.8 gcu_demo.py</span></span></code></pre></div><p>执行 gcu_demo.py 推理示例，代码改编自 <a href="https://github.com/QwenLM/Qwen2.5/blob/main/README.md" target="_blank" rel="noreferrer">仓库 README</a> 中的给的 Huggingface quick start 用例。</p><p><strong>GCU PyTorch 原生推理支持</strong></p><p>GCU 支持 pytorch 原生推理，在 pytorch 代码上只需做少许改动就可以在 GCU 上顺利运行：</p><ol><li>导入 <em>torch_gcu</em> 后端库，并载入 transfer_to_gcu<div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">try</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#F97583;">    import</span><span style="color:#E1E4E8;"> torch_gcu </span><span style="color:#6A737D;"># 导入 torch_gcu</span></span>
<span class="line"><span style="color:#F97583;">    from</span><span style="color:#E1E4E8;"> torch_gcu </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> transfer_to_gcu </span><span style="color:#6A737D;">#  transfer_to_gcu</span></span>
<span class="line"><span style="color:#F97583;">except</span><span style="color:#79B8FF;"> Exception</span><span style="color:#F97583;"> as</span><span style="color:#E1E4E8;"> e:</span></span>
<span class="line"><span style="color:#79B8FF;">    print</span><span style="color:#E1E4E8;">(e)</span></span></code></pre></div></li><li>device 名改为 <em>gcu</em><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">device </span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;"> &quot;gcu&quot;</span></span></code></pre></div></li></ol><p><strong>GCU vLLM 推理</strong></p><p>GCU 也支持 <em>vLLM</em> 原生推理，需要安装 GCU 版本的 <em>vLLM</em> 后，将设备名改为 gcu</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span>python -m vllm.entrypoints.openai.api_server --served-model-name Qwen2.5-7B-Instruct --model Qwen/Qwen2.5-7B-Instruct --device gcu</span></span></code></pre></div>`,19)]))}const _=n(t,[["render",l]]);export{g as __pageData,_ as default};
