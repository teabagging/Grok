import{_ as n,c as a,b as l,o}from"./chunks/framework.B1z0IdBH.js";const y=JSON.parse('{"title":"codecompanion.nvim","description":"","frontmatter":{},"headers":[{"level":2,"title":"Features","slug":"features","link":"#features","children":[]},{"level":2,"title":"Installation","slug":"installation","link":"#installation","children":[{"level":3,"title":"Install via lazy.nvim","slug":"install-via-lazy-nvim","link":"#install-via-lazy-nvim","children":[]},{"level":3,"title":"Install via mini.deps","slug":"install-via-mini-deps","link":"#install-via-mini-deps","children":[]},{"level":3,"title":"Other Installation Methods","slug":"other-installation-methods","link":"#other-installation-methods","children":[]}]},{"level":2,"title":"Usage","slug":"usage","link":"#usage","children":[]}],"relativePath":"guide/codecompanion.nvim/README.md","filePath":"guide/codecompanion.nvim/README.md"}'),e={name:"guide/codecompanion.nvim/README.md"};function p(t,s,r,i,c,E){return o(),a("div",null,s[0]||(s[0]=[l(`<h1 id="codecompanion-nvim" tabindex="-1"><a href="https://github.com/olimorris/codecompanion.nvim" target="_blank" rel="noreferrer">codecompanion.nvim</a> <a class="header-anchor" href="#codecompanion-nvim" aria-label="Permalink to &quot;[codecompanion.nvim](https://github.com/olimorris/codecompanion.nvim)&quot;">‚Äã</a></h1><blockquote><p>AI-powered coding, seamlessly in Neovim</p></blockquote><p><strong>codecompanion.nvim</strong> is a productivity tool which streamlines how you develop with LLMs, in Neovim.</p><h2 id="features" tabindex="-1">Features <a class="header-anchor" href="#features" aria-label="Permalink to &quot;Features&quot;">‚Äã</a></h2><ul><li>üí¨ <a href="https://github.com/features/copilot" target="_blank" rel="noreferrer">Copilot Chat</a> meets <a href="https://zed.dev/blog/zed-ai" target="_blank" rel="noreferrer">Zed AI</a>, in Neovim</li><li>üîå Support for Anthropic, Copilot, Gemini, Ollama, OpenAI, Azure OpenAI, HuggingFace and xAI LLMs (or bring your own!)</li><li>üöÄ Inline transformations, code creation and refactoring</li><li>ü§ñ Variables, Slash Commands, Agents/Tools and Workflows to improve LLM output</li><li>‚ú® Built in prompt library for common tasks like advice on LSP errors and code explanations</li><li>üèóÔ∏è Create your own custom prompts, Variables and Slash Commands</li><li>üìö Have multiple chats open at the same time</li><li>üí™ Async execution for fast performance</li></ul><h2 id="installation" tabindex="-1">Installation <a class="header-anchor" href="#installation" aria-label="Permalink to &quot;Installation&quot;">‚Äã</a></h2><p>First, Navigate to the nvim configuration folder (default on Linux is <code>~/.config/nvim</code>)</p><h3 id="install-via-lazy-nvim" tabindex="-1">Install via <code>lazy.nvim</code> <a class="header-anchor" href="#install-via-lazy-nvim" aria-label="Permalink to &quot;Install via \`lazy.nvim\`&quot;">‚Äã</a></h3><p>Then to the <code>lua/plugins</code> folder. Create a file named <code>init.lua</code> and add the following content:</p><div class="language-lua"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#9ECBFF;">  &quot;olimorris/codecompanion.nvim&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  dependencies </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#9ECBFF;">    &quot;nvim-lua/plenary.nvim&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#9ECBFF;">    &quot;nvim-treesitter/nvim-treesitter&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#B392F0;">  config</span><span style="color:#F97583;"> =</span><span style="color:#F97583;"> function</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#79B8FF;">    require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;codecompanion&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#79B8FF;">setup</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">      adapters </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#B392F0;">        deepseek</span><span style="color:#F97583;"> =</span><span style="color:#F97583;"> function</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#F97583;">          return</span><span style="color:#79B8FF;"> require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;codecompanion.adapters&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#79B8FF;">extend</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;deepseek&quot;</span><span style="color:#E1E4E8;">, {</span></span>
<span class="line"><span style="color:#E1E4E8;">            env </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">              api_key </span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;"> &quot;YOUR_API_KEY&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">            },</span></span>
<span class="line"><span style="color:#E1E4E8;">          })</span></span>
<span class="line"><span style="color:#F97583;">        end</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      },</span></span>
<span class="line"><span style="color:#E1E4E8;">      strategies </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        chat </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> { adapter </span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;"> &quot;deepseek&quot;</span><span style="color:#E1E4E8;">, },</span></span>
<span class="line"><span style="color:#E1E4E8;">        inline </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> { adapter </span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;"> &quot;deepseek&quot; </span><span style="color:#E1E4E8;">},</span></span>
<span class="line"><span style="color:#E1E4E8;">        agent </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> { adapter </span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;"> &quot;deepseek&quot; </span><span style="color:#E1E4E8;">},</span></span>
<span class="line"><span style="color:#E1E4E8;">      },</span></span>
<span class="line"><span style="color:#E1E4E8;">    })</span></span>
<span class="line"><span style="color:#F97583;">  end</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div><p>Restart nvim, and <code>lazy.nvim</code> should automatically download and install the codecompanion.nvim plugin and its dependencies based on the above file.</p><h3 id="install-via-mini-deps" tabindex="-1">Install via <code>mini.deps</code> <a class="header-anchor" href="#install-via-mini-deps" aria-label="Permalink to &quot;Install via \`mini.deps\`&quot;">‚Äã</a></h3><p>Add the following content to your <code>init.lua</code>:</p><div class="language-lua"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">local</span><span style="color:#E1E4E8;"> add, later </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> MiniDeps.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">, MiniDeps.</span><span style="color:#B392F0;">later</span></span>
<span class="line"></span>
<span class="line"><span style="color:#79B8FF;">later</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#79B8FF;">  add</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">    source </span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;"> &quot;olimorris/codecompanion.nvim&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    depends </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#9ECBFF;">      &quot;nvim-lua/plenary.nvim&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#9ECBFF;">      &quot;nvim-treesitter/nvim-treesitter&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#E1E4E8;">  })</span></span>
<span class="line"><span style="color:#79B8FF;">  require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;codecompanion&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#79B8FF;">setup</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">    adapters </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#B392F0;">      deepseek</span><span style="color:#F97583;"> =</span><span style="color:#F97583;"> function</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#F97583;">        return</span><span style="color:#79B8FF;"> require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;codecompanion.adapters&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#79B8FF;">extend</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;deepseek&quot;</span><span style="color:#E1E4E8;">, {</span></span>
<span class="line"><span style="color:#E1E4E8;">          env </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">              api_key </span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;"> &quot;YOUR_API_KEY&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">          },</span></span>
<span class="line"><span style="color:#E1E4E8;">        })</span></span>
<span class="line"><span style="color:#F97583;">      end</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#E1E4E8;">    strategies </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      chat </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> { adapter </span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;"> &quot;deepseek&quot;</span><span style="color:#E1E4E8;">, },</span></span>
<span class="line"><span style="color:#E1E4E8;">      inline </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> { adapter </span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;"> &quot;deepseek&quot; </span><span style="color:#E1E4E8;">},</span></span>
<span class="line"><span style="color:#E1E4E8;">      agent </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> { adapter </span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;"> &quot;deepseek&quot; </span><span style="color:#E1E4E8;">},</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#E1E4E8;">  })</span></span>
<span class="line"><span style="color:#F97583;">end</span><span style="color:#E1E4E8;">)</span></span></code></pre></div><p>Restart nvim, and <code>mini.deps</code> should also automatically download and install the codecompanion.nvim plugin.</p><h3 id="other-installation-methods" tabindex="-1">Other Installation Methods <a class="header-anchor" href="#other-installation-methods" aria-label="Permalink to &quot;Other Installation Methods&quot;">‚Äã</a></h3><p><a href="https://codecompanion.olimorris.dev/installation.html" target="_blank" rel="noreferrer">https://codecompanion.olimorris.dev/installation.html</a></p><h2 id="usage" tabindex="-1">Usage <a class="header-anchor" href="#usage" aria-label="Permalink to &quot;Usage&quot;">‚Äã</a></h2><p><a href="https://codecompanion.olimorris.dev/usage/introduction.html" target="_blank" rel="noreferrer">https://codecompanion.olimorris.dev/usage/introduction.html</a></p>`,19)]))}const u=n(e,[["render",p]]);export{y as __pageData,u as default};
