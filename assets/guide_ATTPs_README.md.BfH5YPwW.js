import{_ as a,c as n,b as e,o as l}from"./chunks/framework.B1z0IdBH.js";const d=JSON.parse('{"title":"APRO-COM/ATTPs-framework","description":"","frontmatter":{},"headers":[{"level":2,"title":"Overview","slug":"overview","link":"#overview","children":[]},{"level":2,"title":"Features","slug":"features","link":"#features","children":[{"level":3,"title":"Agent Operations","slug":"agent-operations","link":"#agent-operations","children":[]},{"level":3,"title":"Data Verification","slug":"data-verification","link":"#data-verification","children":[]},{"level":3,"title":"Price Queries","slug":"price-queries","link":"#price-queries","children":[]}]},{"level":2,"title":"Security Features","slug":"security-features","link":"#security-features","children":[{"level":3,"title":"Access Control","slug":"access-control","link":"#access-control","children":[]},{"level":3,"title":"Verification","slug":"verification","link":"#verification","children":[]}]},{"level":2,"title":"Performance Optimization","slug":"performance-optimization","link":"#performance-optimization","children":[]},{"level":2,"title":"System Requirements","slug":"system-requirements","link":"#system-requirements","children":[]},{"level":2,"title":"Troubleshooting","slug":"troubleshooting","link":"#troubleshooting","children":[]},{"level":2,"title":"Safety & Security","slug":"safety-security","link":"#safety-security","children":[]},{"level":2,"title":"Installation","slug":"installation","link":"#installation","children":[]},{"level":2,"title":"Configuration","slug":"configuration","link":"#configuration","children":[]},{"level":2,"title":"Usage with js sdk","slug":"usage-with-js-sdk","link":"#usage-with-js-sdk","children":[]},{"level":2,"title":"Installation","slug":"installation-1","link":"#installation-1","children":[]},{"level":2,"title":"Usage with Python SDK","slug":"usage-with-python-sdk","link":"#usage-with-python-sdk","children":[{"level":3,"title":"Initialize AgentSDK","slug":"initialize-agentsdk","link":"#initialize-agentsdk","children":[]}]}],"relativePath":"guide/ATTPs/README.md","filePath":"guide/ATTPs/README.md"}'),o={name:"guide/ATTPs/README.md"};function t(p,s,r,c,i,E){return l(),n("div",null,s[0]||(s[0]=[e(`<h1 id="apro-com-attps-framework" tabindex="-1">APRO-COM/ATTPs-framework <a class="header-anchor" href="#apro-com-attps-framework" aria-label="Permalink to &quot;APRO-COM/ATTPs-framework&quot;">​</a></h1><p>Foundation framework that enables advanced agent based on DeepSeek interactions, data verification, and price queries with <a href="https://docs.apro.com/attps" target="_blank" rel="noreferrer">ATTPs Protocol</a> . It streamlines agent creation, verification processes, and provides a flexible framework for building robust agent-based solutions.</p><p>For more details about ATTPs, you can see the <a href="https://www.apro.com/attps.pdf" target="_blank" rel="noreferrer">whitepaper here</a></p><h2 id="overview" tabindex="-1">Overview <a class="header-anchor" href="#overview" aria-label="Permalink to &quot;Overview&quot;">​</a></h2><p>The ATTPs framework bridges agent-based logic with the DeepSeek. It handles agent registration, data verification, and price queries, empowering both automated and user-driven workflows.</p><h2 id="features" tabindex="-1">Features <a class="header-anchor" href="#features" aria-label="Permalink to &quot;Features&quot;">​</a></h2><h3 id="agent-operations" tabindex="-1">Agent Operations <a class="header-anchor" href="#agent-operations" aria-label="Permalink to &quot;Agent Operations&quot;">​</a></h3><ul><li><strong>Agent Creation</strong>: Deploy new agents with custom settings</li><li><strong>Registration</strong>: Register agents on-chain or via standardized processes</li><li><strong>Multi-Signer Framework</strong>: Supports threshold-based approval flows</li></ul><h3 id="data-verification" tabindex="-1">Data Verification <a class="header-anchor" href="#data-verification" aria-label="Permalink to &quot;Data Verification&quot;">​</a></h3><ul><li><strong>Chain Validation</strong>: Verify data authenticity on-chain</li><li><strong>Transaction Execution</strong>: Handle verification logic with built-in security checks</li><li><strong>Auto-Hashing</strong>: Convert raw data to hashed formats when needed</li><li><strong>Metadata Parsing</strong>: Validate content type, encoding, and compression</li></ul><h3 id="price-queries" tabindex="-1">Price Queries <a class="header-anchor" href="#price-queries" aria-label="Permalink to &quot;Price Queries&quot;">​</a></h3><ul><li><strong>Live Price Data</strong>: Fetch price information for various pairs</li><li><strong>Format Validation</strong>: Normalize user query inputs to standard trading-pair formats</li><li><strong>APIs Integration</strong>: Retrieve real-time or near-real-time pricing information</li></ul><h2 id="security-features" tabindex="-1">Security Features <a class="header-anchor" href="#security-features" aria-label="Permalink to &quot;Security Features&quot;">​</a></h2><h3 id="access-control" tabindex="-1">Access Control <a class="header-anchor" href="#access-control" aria-label="Permalink to &quot;Access Control&quot;">​</a></h3><ul><li><strong>Private Key Management</strong>: Safe usage of private keys for transaction signing</li><li><strong>Environment Variables</strong>: Secure injection of credentials</li><li><strong>On-Chain Validation</strong>: Leverage on-chain contract checks</li></ul><h3 id="verification" tabindex="-1">Verification <a class="header-anchor" href="#verification" aria-label="Permalink to &quot;Verification&quot;">​</a></h3><ul><li><strong>Input Validation</strong>: Strict schema checks before on-chain operations</li><li><strong>Transaction Receipts</strong>: Provide verifiable transaction details</li><li><strong>Error Handling</strong>: Detailed error logs for quick debugging</li></ul><h2 id="performance-optimization" tabindex="-1">Performance Optimization <a class="header-anchor" href="#performance-optimization" aria-label="Permalink to &quot;Performance Optimization&quot;">​</a></h2><ol><li><p><strong>Cache Management</strong></p><ul><li>Implement caching for frequent queries</li><li>Monitor retrieval times and cache hits</li></ul></li><li><p><strong>Network Efficiency</strong></p><ul><li>Batch requests where possible</li><li>Validate response parsing to reduce overhead</li></ul></li></ol><h2 id="system-requirements" tabindex="-1">System Requirements <a class="header-anchor" href="#system-requirements" aria-label="Permalink to &quot;System Requirements&quot;">​</a></h2><ul><li>Node.js 16.x or higher</li><li>Sufficient network access to on-chain endpoints</li><li>Basic configuration of environment variables</li><li>Minimum 4GB RAM recommended</li></ul><h2 id="troubleshooting" tabindex="-1">Troubleshooting <a class="header-anchor" href="#troubleshooting" aria-label="Permalink to &quot;Troubleshooting&quot;">​</a></h2><ol><li><p><strong>Invalid Agent Settings</strong></p><ul><li>Ensure signers and threshold are correct</li><li>Validate agentHeader for proper UUIDs and numeric values</li></ul></li><li><p><strong>Verification Failures</strong></p><ul><li>Check the input data formats</li><li>Confirm environment variables are set</li></ul></li><li><p><strong>Price Query Errors</strong></p><ul><li>Verify the trading pair format</li><li>Check external API availability</li></ul></li></ol><h2 id="safety-security" tabindex="-1">Safety &amp; Security <a class="header-anchor" href="#safety-security" aria-label="Permalink to &quot;Safety &amp; Security&quot;">​</a></h2><ol><li><p><strong>Credential Management</strong></p><ul><li>Store private keys securely</li><li>Do not commit secrets to version control</li></ul></li><li><p><strong>Transaction Limits</strong></p><ul><li>Configure thresholds to mitigate abuse</li><li>Log transaction attempts and failures</li></ul></li><li><p><strong>Monitoring &amp; Logging</strong></p><ul><li>Track unusual activity</li><li>Maintain detailed audit logs</li></ul></li></ol><h1 id="usage-with-js" tabindex="-1">Usage with js <a class="header-anchor" href="#usage-with-js" aria-label="Permalink to &quot;Usage with js&quot;">​</a></h1><h2 id="installation" tabindex="-1">Installation <a class="header-anchor" href="#installation" aria-label="Permalink to &quot;Installation&quot;">​</a></h2><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#B392F0;">npm</span><span style="color:#9ECBFF;"> install</span><span style="color:#9ECBFF;"> ai-agent-sdk-js</span></span></code></pre></div><h2 id="configuration" tabindex="-1">Configuration <a class="header-anchor" href="#configuration" aria-label="Permalink to &quot;Configuration&quot;">​</a></h2><p>Configure the plugin by setting environment variables or runtime settings:</p><ul><li>APRO_RPC_URL</li><li>APRO_PROXY_ADDRESS</li><li>APRO_PRIVATE_KEY</li><li>APRO_CONVERTER_ADDRESS</li><li>APRO_AUTO_HASH_DATA</li></ul><h2 id="usage-with-js-sdk" tabindex="-1">Usage with js sdk <a class="header-anchor" href="#usage-with-js-sdk" aria-label="Permalink to &quot;Usage with js sdk&quot;">​</a></h2><p>To use the AI Agent SDK, import the library and create an instance of the <code>Agent</code> class:</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { AgentSDK } </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;ai-agent-sdk-js&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> agent</span><span style="color:#F97583;"> =</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> AgentSDK</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">  rpcUrl: </span><span style="color:#9ECBFF;">&#39;https://bsc-testnet-rpc.publicnode.com&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  privateKey: </span><span style="color:#9ECBFF;">&#39;&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  proxyAddress: </span><span style="color:#9ECBFF;">&#39;&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// if you want the SDK to hash the data automatically</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> autoHashAgent</span><span style="color:#F97583;"> =</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> AgentSDK</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">  rpcUrl: </span><span style="color:#9ECBFF;">&#39;https://bsc-testnet-rpc.publicnode.com&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  privateKey: </span><span style="color:#9ECBFF;">&#39;&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  proxyAddress: </span><span style="color:#9ECBFF;">&#39;&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  autoHashData: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  converterAddress: </span><span style="color:#9ECBFF;">&#39;&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre></div><p>To create a new agent, call the <code>createAndRegisterAgent</code> method:</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#F97583;"> type</span><span style="color:#E1E4E8;"> { AgentSettings, TransactionOptions } </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;ai-agent-sdk-js&#39;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { randomUUID } </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;node:crypto&#39;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { parseUnits } </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;ethers&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// prepare the agent settings</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> agentSettings</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> AgentSettings</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  signers: [],</span></span>
<span class="line"><span style="color:#E1E4E8;">  threshold: </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  converterAddress: </span><span style="color:#9ECBFF;">&#39;&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  agentHeader: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    messageId: </span><span style="color:#B392F0;">randomUUID</span><span style="color:#E1E4E8;">(),</span></span>
<span class="line"><span style="color:#E1E4E8;">    sourceAgentId: </span><span style="color:#B392F0;">randomUUID</span><span style="color:#E1E4E8;">(),</span></span>
<span class="line"><span style="color:#E1E4E8;">    sourceAgentName: </span><span style="color:#9ECBFF;">&#39;AI Agent SDK JS&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    targetAgentId: </span><span style="color:#9ECBFF;">&#39;&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    timestamp: Math.</span><span style="color:#B392F0;">floor</span><span style="color:#E1E4E8;">(Date.</span><span style="color:#B392F0;">now</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">/</span><span style="color:#79B8FF;"> 1000</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">    messageType: </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    priority: </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    ttl: </span><span style="color:#79B8FF;">3600</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// prepare the transaction options</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> nonce</span><span style="color:#F97583;"> =</span><span style="color:#F97583;"> await</span><span style="color:#E1E4E8;"> agent.</span><span style="color:#B392F0;">getNextNonce</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> transactionOptions</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> TransactionOptions</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  nonce,</span></span>
<span class="line"><span style="color:#E1E4E8;">  gasPrice: </span><span style="color:#B392F0;">parseUnits</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;1&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;gwei&#39;</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">  gasLimit: </span><span style="color:#B392F0;">BigInt</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">2000000</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> tx</span><span style="color:#F97583;"> =</span><span style="color:#F97583;"> await</span><span style="color:#E1E4E8;"> agent.</span><span style="color:#B392F0;">createAndRegisterAgent</span><span style="color:#E1E4E8;">({ agentSettings, transactionOptions })</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// or you can leave the transaction options empty, the SDK will use the auto-generated values</span></span>
<span class="line"><span style="color:#6A737D;">// const tx = await agent.createAndRegisterAgent({ agentSettings })</span></span></code></pre></div><p>The SDK also provides the tool to extract the new agent address from the transaction receipt:</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { parseNewAgentAddress } </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;ai-agent-sdk-js&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> receipt</span><span style="color:#F97583;"> =</span><span style="color:#F97583;"> await</span><span style="color:#E1E4E8;"> tx.</span><span style="color:#B392F0;">wait</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> agentAddress</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> parseNewAgentAddress</span><span style="color:#E1E4E8;">(receipt)</span></span></code></pre></div><p>To verify the data integrity, call the <code>verify</code> method:</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#F97583;"> type</span><span style="color:#E1E4E8;"> { MessagePayload } </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;ai-agent-sdk-js&#39;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { hexlify, keccak256, toUtf8Bytes } </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;ethers&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// prepare the payload</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> data</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> hexlify</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">toUtf8Bytes</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;Hello World!&#39;</span><span style="color:#E1E4E8;">))</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> dataHash</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> keccak256</span><span style="color:#E1E4E8;">(data)</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> payload</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> MessagePayload</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  data,</span></span>
<span class="line"><span style="color:#E1E4E8;">  dataHash,</span></span>
<span class="line"><span style="color:#E1E4E8;">  signatures: [</span></span>
<span class="line"><span style="color:#E1E4E8;">    {</span></span>
<span class="line"><span style="color:#E1E4E8;">      r: </span><span style="color:#9ECBFF;">&#39;&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      s: </span><span style="color:#9ECBFF;">&#39;&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      v: </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 1, 0, 27, 28 are allowed</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#6A737D;">    // ...</span></span>
<span class="line"><span style="color:#E1E4E8;">  ],</span></span>
<span class="line"><span style="color:#E1E4E8;">  metadata: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    contentType: </span><span style="color:#9ECBFF;">&#39;&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    encoding: </span><span style="color:#9ECBFF;">&#39;&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    compression: </span><span style="color:#9ECBFF;">&#39;&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> tx</span><span style="color:#F97583;"> =</span><span style="color:#F97583;"> await</span><span style="color:#E1E4E8;"> agent.</span><span style="color:#B392F0;">verify</span><span style="color:#E1E4E8;">({ payload, agent: </span><span style="color:#9ECBFF;">&#39;&#39;</span><span style="color:#E1E4E8;">, digest: </span><span style="color:#9ECBFF;">&#39;&#39;</span><span style="color:#E1E4E8;"> })</span></span></code></pre></div><p>If the data is obtained from the APRO DATA pull service, you can use the auto-hash feature:</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#F97583;"> type</span><span style="color:#E1E4E8;"> { MessagePayload } </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;ai-agent-sdk-js&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> payload</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> MessagePayload</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  data: </span><span style="color:#9ECBFF;">&#39;0x...&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  signatures: [</span></span>
<span class="line"><span style="color:#E1E4E8;">    {</span></span>
<span class="line"><span style="color:#E1E4E8;">      r: </span><span style="color:#9ECBFF;">&#39;&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      s: </span><span style="color:#9ECBFF;">&#39;&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      v: </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 1, 0, 27, 28 are allowed</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#6A737D;">    // ...</span></span>
<span class="line"><span style="color:#E1E4E8;">  ],</span></span>
<span class="line"><span style="color:#E1E4E8;">  metadata: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    contentType: </span><span style="color:#9ECBFF;">&#39;&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    encoding: </span><span style="color:#9ECBFF;">&#39;&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    compression: </span><span style="color:#9ECBFF;">&#39;&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// When</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> tx</span><span style="color:#F97583;"> =</span><span style="color:#F97583;"> await</span><span style="color:#E1E4E8;"> autoHashAgent.</span><span style="color:#B392F0;">verify</span><span style="color:#E1E4E8;">({ payload, agent: </span><span style="color:#9ECBFF;">&#39;&#39;</span><span style="color:#E1E4E8;">, digest: </span><span style="color:#9ECBFF;">&#39;&#39;</span><span style="color:#E1E4E8;"> })</span></span></code></pre></div><p>For more examples, see the <a href="https://github.com/APRO-com/ai-agent-sdk-js/tree/main/test" target="_blank" rel="noreferrer">test</a> cases.</p><h1 id="usage-with-python" tabindex="-1">Usage with Python <a class="header-anchor" href="#usage-with-python" aria-label="Permalink to &quot;Usage with Python&quot;">​</a></h1><h2 id="installation-1" tabindex="-1">Installation <a class="header-anchor" href="#installation-1" aria-label="Permalink to &quot;Installation&quot;">​</a></h2><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#9ECBFF;"> pip3</span><span style="color:#9ECBFF;"> install</span><span style="color:#9ECBFF;"> ai-agent-sdk</span></span></code></pre></div><h2 id="usage-with-python-sdk" tabindex="-1">Usage with Python SDK <a class="header-anchor" href="#usage-with-python-sdk" aria-label="Permalink to &quot;Usage with Python SDK&quot;">​</a></h2><h3 id="initialize-agentsdk" tabindex="-1">Initialize AgentSDK <a class="header-anchor" href="#initialize-agentsdk" aria-label="Permalink to &quot;Initialize AgentSDK&quot;">​</a></h3><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> ai_agent.agent </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> AgentSDK</span></span>
<span class="line"></span>
<span class="line"><span style="color:#79B8FF;">AGENT_PROXY_ADDRESS</span><span style="color:#F97583;"> =</span><span style="color:#9ECBFF;"> &quot;0x07771A3026E60776deC8C1C61106FB9623521394&quot;</span></span>
<span class="line"><span style="color:#79B8FF;">NETWORK_RPC</span><span style="color:#F97583;"> =</span><span style="color:#9ECBFF;"> &quot;https://testnet-rpc.bitlayer.org&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">agent </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> AgentSDK(</span><span style="color:#FFAB70;">endpoint_uri</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">NETWORK_RPC</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">proxy_address</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">AGENT_PROXY_ADDRESS</span><span style="color:#E1E4E8;">)</span></span></code></pre></div><p>To create a new agent, call the createAndRegisterAgent method:</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> time</span></span>
<span class="line"><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> ai_agent.entities </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> (</span></span>
<span class="line"><span style="color:#E1E4E8;">    AgentSettings,</span></span>
<span class="line"><span style="color:#E1E4E8;">    AgentHeader,</span></span>
<span class="line"><span style="color:#E1E4E8;">    MessageType,</span></span>
<span class="line"><span style="color:#E1E4E8;">    Priority</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> ai_agent.utils </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> (</span></span>
<span class="line"><span style="color:#E1E4E8;">    generate_uuid_v4</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#79B8FF;">AGENT_SETTINGS</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> AgentSettings(</span></span>
<span class="line"><span style="color:#FFAB70;">    signers</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">[</span></span>
<span class="line"><span style="color:#9ECBFF;">        &quot;0x4b1056f504f32c678227b5Ae812936249c40AfBF&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#9ECBFF;">        &quot;0xB973476e0cF88a3693014b99f230CEB5A01ac686&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#9ECBFF;">        &quot;0x6cF0803D049a4e8DC01da726A5a212BCB9FAC1a1&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#9ECBFF;">        &quot;0x9D46daa26342e9E9e586A6AdCEDaD667f985567B&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#9ECBFF;">        &quot;0x33AF673aBcE193E20Ee94D6fBEb30fEf0cA7015b&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#9ECBFF;">        &quot;0x868D2dE4a0378450BC62A7596463b30Dc4e3897E&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#9ECBFF;">        &quot;0xD4E157c36E7299bB40800e4aE7909DDcA8097f67&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#9ECBFF;">        &quot;0xA3866A07ABEf3fD0643BD7e1c32600520F465ca8&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#9ECBFF;">        &quot;0x62f642Ae0Ed7F12Bc40F2a9Bf82ccD0a3F3b7531&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    ],</span></span>
<span class="line"><span style="color:#FFAB70;">    threshold</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#FFAB70;">    converter_address</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;0xaB303EF87774D9D259d1098E9aA4dD6c07F69240&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#FFAB70;">    agent_header</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">AgentHeader(</span></span>
<span class="line"><span style="color:#FFAB70;">        version</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;1.0&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#FFAB70;">        message_id</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;d4d0813f-ceb7-4ce1-8988-12899b26c4b6&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#FFAB70;">        source_agent_id</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;da70f6b3-e580-470f-b88b-caa5369e7778&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#FFAB70;">        source_agent_name</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;APRO Pull Mode Agent&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#FFAB70;">        target_agent_id</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#FFAB70;">        timestamp</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">int</span><span style="color:#E1E4E8;">(time.time()),</span></span>
<span class="line"><span style="color:#FFAB70;">        message_type</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">MessageType.Event,</span></span>
<span class="line"><span style="color:#FFAB70;">        priority</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">Priority.Low,</span></span>
<span class="line"><span style="color:#FFAB70;">        ttl</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">60</span><span style="color:#F97583;"> *</span><span style="color:#79B8FF;"> 60</span></span>
<span class="line"><span style="color:#E1E4E8;">    )</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">dynamic_setting </span><span style="color:#F97583;">=</span><span style="color:#79B8FF;"> AGENT_SETTINGS</span></span>
<span class="line"><span style="color:#E1E4E8;">dynamic_setting.agent_header.source_agent_id </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> generate_uuid_v4()</span></span>
<span class="line"><span style="color:#E1E4E8;">dynamic_setting.agent_header.target_agent_id </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> generate_uuid_v4()</span></span>
<span class="line"><span style="color:#E1E4E8;">dynamic_setting.agent_header.message_id </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> generate_uuid_v4()</span></span>
<span class="line"><span style="color:#E1E4E8;">user_owner </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> agent.add_account(</span><span style="color:#9ECBFF;">&quot;0x_user_private_key&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> agent.create_and_register_agent(</span></span>
<span class="line"><span style="color:#FFAB70;">    transmitter</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#FFAB70;">    nonce</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">None</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#FFAB70;">    settings</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">AGENT_SETTINGS</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;created agent:&quot;</span><span style="color:#E1E4E8;">, result)</span></span></code></pre></div><p>To verify the data integrity, call the verify method:</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> ai_agent.entities </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> (</span></span>
<span class="line"><span style="color:#E1E4E8;">    AgentMessagePayload,</span></span>
<span class="line"><span style="color:#E1E4E8;">    Proofs,</span></span>
<span class="line"><span style="color:#E1E4E8;">    AgentMetadata,</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#79B8FF;">AGENT_CONTRACT</span><span style="color:#F97583;"> =</span><span style="color:#9ECBFF;"> &quot;0xA1903361Ee8Ec35acC7c8951b4008dbE8D12C155&quot;</span></span>
<span class="line"><span style="color:#79B8FF;">AGENT_SETTING_DIGEST</span><span style="color:#F97583;"> =</span><span style="color:#9ECBFF;"> &quot;0x010038164dba6abffb84eb5cb538850d9bc5d8f815149a371069b3255fd177a4&quot;</span></span>
<span class="line"><span style="color:#79B8FF;">AGENT_PAYLOAD</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> AgentMessagePayload(</span></span>
<span class="line"><span style="color:#FFAB70;">    data</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;0x0006e706cf7ab41fa599311eb3de68be869198ce62aef1cd079475ca50e5b3f60000000000000000000000000000000000000000000000000000000002b1bf0e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000022000000000000000000000000000000000000000000000000000000000000002a0000101000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001200003665949c883f9e0f6f002eac32e00bd59dfe6c34e92a91c37d6a8322d6489000000000000000000000000000000000000000000000000000000006762677d000000000000000000000000000000000000000000000000000000006762677d000000000000000000000000000000000000000000000000000003128629ec0800000000000000000000000000000000000000000000000004db732547630000000000000000000000000000000000000000000000000000000000006763b8fd0000000000000000000000000000000000000000000015f0f60671beb95cc0000000000000000000000000000000000000000000000015f083baa654a7b900000000000000000000000000000000000000000000000015f103ec7cb057ea80000000000000000000000000000000000000000000000000000000000000000003b64f7e72208147bb898e8b215d0997967bef0219263726c76995d8a19107d6ba5306a176474f9ccdb1bc5841f97e0592013e404e15b0de0839b81d0efb26179f222e0191269a8560ebd9096707d225bc606d61466b85d8568d7620a3b59a73e800000000000000000000000000000000000000000000000000000000000000037cae0f05c1bf8353eb5db27635f02b40a534d4192099de445764891198231c597a303cd15f302dafbb1263eb6e8e19cbacea985c66c6fed3231fd84a84ebe0276f69f481fe7808c339a04ceb905bb49980846c8ceb89a27b1c09713cb356f773&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#FFAB70;">    data_hash</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;0x53d9f133f1265bd4391fcdf89b63424cbcfd316c8448f76cc515647267ac0a8e&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#FFAB70;">    proofs</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">Proofs(</span></span>
<span class="line"><span style="color:#FFAB70;">        zk_proof</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;0x&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#FFAB70;">        merkle_proof</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;0x&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#FFAB70;">        signature_proof</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;0x000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000001600000000000000000000000000000000000000000000000000000000000000003b64f7e72208147bb898e8b215d0997967bef0219263726c76995d8a19107d6ba5306a176474f9ccdb1bc5841f97e0592013e404e15b0de0839b81d0efb26179f222e0191269a8560ebd9096707d225bc606d61466b85d8568d7620a3b59a73e800000000000000000000000000000000000000000000000000000000000000037cae0f05c1bf8353eb5db27635f02b40a534d4192099de445764891198231c597a303cd15f302dafbb1263eb6e8e19cbacea985c66c6fed3231fd84a84ebe0276f69f481fe7808c339a04ceb905bb49980846c8ceb89a27b1c09713cb356f7730000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    ),</span></span>
<span class="line"><span style="color:#FFAB70;">    meta_data</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">AgentMetadata(</span></span>
<span class="line"><span style="color:#FFAB70;">        content_type</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;0x&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#FFAB70;">        encoding</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;0x&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#FFAB70;">        compression</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;0x&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    )</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">user_owner </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> agent.add_account(</span><span style="color:#9ECBFF;">&quot;0x_user_private_key&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> agent.verify(</span></span>
<span class="line"><span style="color:#FFAB70;">    transmitter</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">user_owner,</span></span>
<span class="line"><span style="color:#FFAB70;">    nonce</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">None</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#FFAB70;">    agent_contract</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">AGENT_CONTRACT</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#FFAB70;">    settings_digest</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">AGENT_SETTING_DIGEST</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#FFAB70;">    payload</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">AGENT_PAYLOAD</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;verify:&quot;</span><span style="color:#E1E4E8;">, result)</span></span></code></pre></div><p>For more examples, see the <a href="https://github.com/APRO-com/ai-agent-sdk-python/tree/main/tests" target="_blank" rel="noreferrer">test cases</a>.</p><h1 id="other-sdks" tabindex="-1">Other SDKs <a class="header-anchor" href="#other-sdks" aria-label="Permalink to &quot;Other SDKs&quot;">​</a></h1><p>JAVA: <a href="https://github.com/APRO-com/ai-agent-sdk-java" target="_blank" rel="noreferrer">https://github.com/APRO-com/ai-agent-sdk-java</a></p><p>RUST: <a href="https://github.com/APRO-com/ai-agent-sdk-rust" target="_blank" rel="noreferrer">https://github.com/APRO-com/ai-agent-sdk-rust</a></p><p>GOLANG: <a href="https://github.com/APRO-com/ai-agent-sdk-go" target="_blank" rel="noreferrer">https://github.com/APRO-com/ai-agent-sdk-go</a></p><h1 id="support" tabindex="-1">Support <a class="header-anchor" href="#support" aria-label="Permalink to &quot;Support&quot;">​</a></h1><p>For issues or feature requests:</p><ol><li>Check existing documentation</li><li>Submit a GitHub issue with relevant details</li><li>Include transaction logs and system info if applicable</li></ol><h1 id="contributing" tabindex="-1">Contributing <a class="header-anchor" href="#contributing" aria-label="Permalink to &quot;Contributing&quot;">​</a></h1><p>We welcome pull requests! Refer to the project’s CONTRIBUTING.md and open discussions to coordinate efforts.</p><h1 id="credits" tabindex="-1">Credits <a class="header-anchor" href="#credits" aria-label="Permalink to &quot;Credits&quot;">​</a></h1><ul><li><a href="https://www.apro.com/" target="_blank" rel="noreferrer">APRO</a> - Plugin sponsor and partner</li><li><a href="https://github.com/APRO-com/ai-agent-sdk-js" target="_blank" rel="noreferrer">ai-agent-sdk-js</a> - Underlying agent SDK</li><li><a href="https://docs.ethers.io/" target="_blank" rel="noreferrer">ethers.js</a> - Transaction and contract interaction</li><li>Community contributors for feedback and testing</li></ul><p>For more information about Apro plugin capabilities:</p><ul><li><a href="https://docs.apro.com/en" target="_blank" rel="noreferrer">Apro Documentation</a></li></ul><h1 id="license" tabindex="-1">License <a class="header-anchor" href="#license" aria-label="Permalink to &quot;License&quot;">​</a></h1><p>This plugin is part of the Eliza project. Refer to the main project repository for licensing details.</p>`,69)]))}const F=a(o,[["render",t]]);export{d as __pageData,F as default};
